{"version":3,"file":"static/js/315.f520df51.chunk.js","mappings":"uSAoDA,MAxCA,SAAmBA,GACf,OAAwBC,EAAAA,EAAAA,UAASD,EAAME,MAAvC,eAAOA,EAAP,KAAaC,EAAb,KACMC,EAASJ,EAAMI,OAEjBC,GAAa,SAACC,EAAA,EAAD,CAAaC,MAAM,SAKpC,MAJa,IAAVH,IACCC,GAAa,UAACG,EAAA,EAAD,CAAMC,QAAQ,OAAOC,GAAI,CAAC,cAAe,YAAzC,cAAwDN,EAAxD,SAIb,UAACO,EAAA,EAAD,CAAOF,QAAQ,QAAQC,IAAE,QAAGE,MAAM,OAAQC,OAAO,OAAQC,QAAS,OAAQC,cAAc,SAAUC,IAAI,MAAOC,QAAQ,eAA5F,QAAiH,QAA1I,WACI,SAACC,EAAA,EAAD,CAAOC,aAAa,MAAMC,MAAM,UAAUX,QAAQ,WAAWY,aAAc,CAACC,SAAU,MAAMC,WAAY,WACxG,UAACf,EAAA,EAAD,CAAMC,QAAQ,OAAd,WACI,SAAC,IAAD,CACIe,MAAOtB,EACPuB,cAAe,SAAAvB,GAAI,OAAIC,EAAQD,EAAZ,EACnBwB,UAAW,SAAAxB,GAAI,OAAIwB,EAAAA,EAAAA,WAAUxB,EAAMyB,EAAAA,UAAAA,OAApB,EACfC,QAAS,GACTC,MAAO,CACHC,WAAY,sCACZC,SAAU,OAGlB,SAACC,EAAA,EAAD,CAAKtB,GAAI,CAAEI,QAAS,QAApB,UACI,SAACmB,EAAA,EAAD,CACAC,QAAS,kBAAMlC,EAAMmC,QAAQjC,EAApB,EACTO,QAAQ,QACR2B,KAAK,KACLhB,MAAM,UACN,aAAW,UACXV,GAAI,CAAE2B,GAAI,OAAQC,WAAY,KAN9B,+BAUR,SAACpB,EAAA,EAAD,CAAOC,aAAa,QAAQC,MAAM,UAAUX,QAAQ,WAAWY,aAAc,CAACC,SAAU,MAAMC,WAAY,UACzGlB,IAGZ,E,UCTD,MApCA,SAAmBL,GACf,OAA4BC,EAAAA,EAAAA,UAAS,yBAArC,eAAOG,EAAP,KAAemC,EAAf,KA0BA,OACI,SAAC,IAAD,CAAM7B,GAAI,CAAC8B,EAAG,GAAKC,WAAS,EAACC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAnD,UACI,SAAC,IAAD,CAAMD,GAAI,GAAIE,GAAI,EAAlB,UACI,SAAC,EAAD,CAAW3C,KA3BN,4JA2ByBE,OAAQA,EAAQ+B,QAb1C,SAACjC,GACbqC,EAAU,IACVO,MAAM,oDAAgC,CAClCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAChD,KAAMA,EAAKiD,MAAM,QACvCC,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IAAqBF,MAAK,SAAAG,GACtCjB,EAAUiB,EAAKC,OAAOC,KAAK,MAAO,GACzC,OASJ,C","sources":["components/CodeBlock.js","components/CodeSpace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-python';\nimport '../utils/prism-dracula.css';\n\nimport { Sheet, Typography, Badge, Button, Box} from '@mui/joy';\nimport Card from '@mui/joy/Card';\nimport LoadingCard from './LoadingCard';\n\n\nfunction CodeBlock(props) {\n    const [code, setCode] = useState(props.code);\n    const result = props.result\n\n    let resultCard = <LoadingCard ratio=\"16/2\"/>;\n    if(result != '') {\n        resultCard = <Card variant='soft' sx={{'white-space': 'pre-wrap'}}> {result} </Card>\n    }\n\n    return (\n        <Sheet variant='plain' sx={{width:'100%', height:'100%', display: 'flex', flexDirection:'column', gap:'4px', bgcolor:'transparent', width:'auto'}}>\n            <Badge badgeContent='Kod' color=\"primary\" variant='outlined' anchorOrigin={{vertical: 'top',horizontal: 'left',}}/>\n            <Card variant='soft'>\n                <Editor\n                    value={code}\n                    onValueChange={code => setCode(code)}\n                    highlight={code => highlight(code, languages.python)}\n                    padding={10}\n                    style={{\n                        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                        fontSize: 14,\n                    }}\n                />\n                <Box sx={{ display: 'flex' }}>\n                    <Button\n                    onClick={() => props.runCode(code)}\n                    variant=\"solid\"\n                    size=\"sm\"\n                    color=\"primary\"\n                    aria-label=\"Uruchom\"\n                    sx={{ ml: 'auto', fontWeight: 600 }}\n                    >Uruchom kod</Button>\n                </Box>\n            </Card>\n            <Badge badgeContent='Wynik' color='primary' variant='outlined' anchorOrigin={{vertical: 'top',horizontal: 'left',}}/>\n            {resultCard}\n        </Sheet>\n    );\n}\n\nexport default CodeBlock;","import CodeBlock from \"./CodeBlock\";\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@mui/material/Unstable_Grid2';\n\nfunction CodeSpace(props) {\n    const [result, setResult] = useState('Czekam...\\ntest\\n t\\n')\n    const ip = \"server.blazej-smorawski.com\"\n    const exampleCode = `\nx = 5\nfor i in range(10):\n    print(i)\n\n\nclass kot:\n    def __init__(self):\n        self.kolor = \"czarny\"\n\nburek = kot()\nprint(burek.kolor)\n`;\n\n    const runCode = (code) => {\n        setResult('')\n        fetch(\"http://\"+ip+\":8080/send_code\", {\n            method: \"POST\",\n            body: JSON.stringify({code: code.split('\\n')}),\n            headers: { 'Content-type': \"application/json\"}\n        }).then(response => response.json()).then(data => {\n            setResult(data.stdout.join('\\n'))})\n    }\n\n    return (\n        <Grid sx={{m: 1 }} container spacing={{ xs: 2, md: 3 }}>\n            <Grid xs={12} sm={8}>\n                <CodeBlock code={exampleCode} result={result} runCode={runCode}/>\n            </Grid>\n        </Grid>  \n    );\n}\n\nexport default CodeSpace"],"names":["props","useState","code","setCode","result","resultCard","LoadingCard","ratio","Card","variant","sx","Sheet","width","height","display","flexDirection","gap","bgcolor","Badge","badgeContent","color","anchorOrigin","vertical","horizontal","value","onValueChange","highlight","languages","padding","style","fontFamily","fontSize","Box","Button","onClick","runCode","size","ml","fontWeight","setResult","m","container","spacing","xs","md","sm","fetch","method","body","JSON","stringify","split","headers","then","response","json","data","stdout","join"],"sourceRoot":""}